üìò Understanding Dynamic Programming
Dynamic programming, like the divide-and-conquer method, solves problems by combining solutions to subproblems.

(Note: ‚ÄúProgramming‚Äù here refers to a tabular method‚Äînot writing computer code.)

As covered in earlier chapters, divide-and-conquer algorithms partition a problem into disjoint subproblems, solve them recursively, and then combine their results to solve the original problem.

In contrast, dynamic programming is used when subproblems overlap‚Äîmeaning they share sub-subproblems. In such cases, divide-and-conquer algorithms may do redundant work by solving the same sub-subproblems multiple times.

Dynamic programming avoids this inefficiency by:

Solving each sub-subproblem only once.

Storing the solution in a table.

Reusing the stored results when needed.

üéØ When to Use Dynamic Programming
Dynamic programming is typically applied to optimization problems‚Äîthose with many possible solutions where each has a measurable value (e.g., cost, time, profit). The goal is to find a solution with the optimal (maximum or minimum) value.

Note: There may be multiple solutions that yield the optimal value. Any such solution is referred to as an optimal solution (not the optimal solution).

üß≠ Steps to Develop a Dynamic Programming Algorithm
To design a dynamic programming solution, follow these four steps:

Characterize the structure of an optimal solution.

Recursively define the value of an optimal solution.

Compute the value of an optimal solution (typically bottom-up).

Construct an optimal solution from the computed values.

Steps 1-3 form the core of any dynamic programming approach.